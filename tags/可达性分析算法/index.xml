<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可达性分析算法 on </title>
    <link>https://Edwardwmd.github.io/tags/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 可达性分析算法 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Edwardwmd.github.io/tags/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java GC垃圾回收机制</title>
      <link>https://Edwardwmd.github.io/2021/04/java-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/java-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;  在Java中，垃圾回收（GC）机制可谓是老生常谈了，大部分人都会把这项技术当作Java语言的伴生产物。谈及GC垃圾回收机制，必然就要讲讲对象的“生”和“死”，那他们是在哪里“生”和“死”的呢，它们的生死就是GC回收机制的具体体现。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
