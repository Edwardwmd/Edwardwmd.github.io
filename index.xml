<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://Edwardwmd.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Edwardwmd.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解Android Handler消息机制</title>
      <link>https://Edwardwmd.github.io/2021/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3android-handler%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3android-handler%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;  Handler消息机制在Android有着非常重要的地位，与Binder的IPC机制一样，贯穿了整个Android系统。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ArrayList扩容机制</title>
      <link>https://Edwardwmd.github.io/2021/06/arraylist%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/06/arraylist%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;  Java开发离不开数据结构，这篇文章总会在这着重的讲下我们在开发中尝试用的数据结构-ArrayList。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Base64编码的算法原理</title>
      <link>https://Edwardwmd.github.io/2021/05/base64%E7%BC%96%E7%A0%81%E7%9A%84%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/05/base64%E7%BC%96%E7%A0%81%E7%9A%84%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;  最近在深入的学习关于密码学的相关知识，因为密码学中涉及到了加密和解密，学习内容中穿插了关于Base64编码算法的问题。为此，我特地去了解了下关于Base64编码的算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据结构之单向链表</title>
      <link>https://Edwardwmd.github.io/2021/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;  单向链表是链表的一种，其特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始。链表是使用指针进行构造的列表，并且是由一个个结点组装起来的，因此又称为结点列表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android屏幕适配的那些事</title>
      <link>https://Edwardwmd.github.io/2021/04/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>&lt;p&gt;  关于Android的屏幕适配我想大家都不陌生了，Android 的设备多种多样，屏幕碎片化严重，有着不同的屏幕尺寸和像素密度。 尽管系统可通过基本的缩放和调整大小功能使界面适应不同屏幕，但还需要进一步优化，以确保界面能够在各类屏幕上趋近完美的展现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java GC垃圾回收机制</title>
      <link>https://Edwardwmd.github.io/2021/04/java-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/java-gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;  在Java中，垃圾回收（GC）机制可谓是老生常谈了，大部分人都会把这项技术当作Java语言的伴生产物。谈及GC垃圾回收机制，必然就要讲讲对象的“生”和“死”，那他们是在哪里“生”和“死”的呢，它们的生死就是GC回收机制的具体体现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于Git  OpenSSL SSL_read: Connection was reset, errno 10054错误处理</title>
      <link>https://Edwardwmd.github.io/2021/04/%E5%85%B3%E4%BA%8Egit-openssl-ssl_read-connection-was-reset-errno-10054%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/%E5%85%B3%E4%BA%8Egit-openssl-ssl_read-connection-was-reset-errno-10054%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;  最近开发将本地仓库的代码push到远程仓库时，git Bash终端给出以下这个错误：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索设计模式-单例模式</title>
      <link>https://Edwardwmd.github.io/2021/04/%E6%8E%A2%E7%B4%A2%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/%E6%8E%A2%E7%B4%A2%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;  众所周知，单例模式是所有设计模式中最常运用且简单的设计模式，单例模式有多种写法（变种写法），自己归纳了六种写法：饿汉式、非线程安全懒汉式、线程安全懒汉式、DCL双重校验锁懒汉式、静态内部类懒汉式、枚举类式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅析OkHttp源码，探入Retrofit核心</title>
      <link>https://Edwardwmd.github.io/2021/04/%E6%B5%85%E6%9E%90okhttp%E6%BA%90%E7%A0%81%E6%8E%A2%E5%85%A5retrofit%E6%A0%B8%E5%BF%83/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Edwardwmd.github.io/2021/04/%E6%B5%85%E6%9E%90okhttp%E6%BA%90%E7%A0%81%E6%8E%A2%E5%85%A5retrofit%E6%A0%B8%E5%BF%83/</guid>
      <description>&lt;p&gt;  &lt;a href=&#34;https://square.github.io/okhttp/&#34;&gt;OkHttp&lt;/a&gt;与&lt;a href=&#34;https://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt;一样，同出一处，二者皆是极为优秀的开源框架，HTTP是现代应用程序网络的方式。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
